David Toledo

Cookies_________________________

A. Go to FDF and use your browser's Inspector to take a look at your cookies for cs338.jeffondich.com. Are there cookies for that domain? What are their names and values?
  There is a cookie in  cs338.jeffondich.com, it is a theme cookie, and the value is default.

B. Using the "Theme" menu on the FDF page, change your theme to red or blue. Look at your cookies for cs338.jeffondich.com again. Did they change?
  Yes changing the theme will change the value of the theme cookie to whatever theme I pick.

C. Do the previous two steps (examining cookies and changing the theme) using Burpsuite. What "Cookie:" and "Set-Cookie:" HTTP headers do you see? Do you see the same cookie values as you did with the Inspector?
  When I first load the website, the response to my GET request had a header of Set-Cookie: theme=default, which coorisponds with what we saw previously. It also shows an experiation date.
When chaning the theme, we see the GET request contain the requested theme as "?theme=red" and the cookie theme is still default. The response now contains a Set-Cookie header in which it matches the theme I picked out. 

D. Quit your browser, relaunch it, and go back to the FDF. Is your red or blue theme (wherever you last left it) still selected?
  Yes, after quitting and relaunching, the browser remained with the theme I kept, as the cookie the broswer sent the request with was teh theme I last selected.


E. How is the current theme transmitted between the browser and the FDF server?
  The current theme was sent via a header in the GET request, not a Set-Cookie but just a Cookie header with the value being red (the theme I picked).


F. When you change the theme, how is the change transmitted between the browser and the FDF server?
  When changing the theme, the server sends a GET request with the theme I requested as part of what it is getting. We see the GET requested formatted as:
  GET /fdf/?theme=blue HTTP/1.1
  The request then follows with a Set-Cookie header to contain the requested theme color.


G. How could you use your browser's Inspector to change the FDF theme without using the FDF's Theme menu?
     I cannot seem to do this, but I would think that changing the value of the cookie under the application/storage section of Inspect would be able to change the theme.




H. How could you use Burpsuite's Proxy tool to change the FDF theme without using the FDF's Theme menu?
  In Burp, we can edit the intercepted GET request to contain the desired theme, therefore changing the theme without us actually needing to click the theme button.


I. Where does your OS (the OS where you're running your browser and Burpsuite, that is) store cookies? (This will require some internet searching, most likely.)
  On Kali, Burpsuite stores the cookies in this sqp file at this path: /home/kali/.BurpSuite/pre-wired-browser/Default/Cookies



XSS__________________________

Provide a diagram and/or a step-by-step description of the nature and timing of Moriarty's attack on users of the FDF. Note that some of the relevant actions may happen long before other actions.
  Moriarty: 
    Logs into the FDF.
    Creates a discussion post in which the content contains some sort of HTML/CSS or Javascript.
    Submits the post, and waits for user to click it.
  User:
    Sees post from Moriarty.
    Clicks on row to see full post.
    Server then tryin to display the post, reads the html/css/javascript as part of the source code, and implements the code.
    Depending on what Moriarty does, this could have various effects. In one example, Moriarty created a alert to show the users.


Describe an XSS attack that is more virulent than Moriarty's "turn something red" and "pop up a message" attacks. Think about what kinds of things the Javascript might have access to via Alice's browser when Alice views the attacker's post.
  Gaining access to things such as cookies can result in the users data being sent elsewhere without their knowledge. The malicious person does not need to let anyone know
  that they got something of theres, and so the user could carry on as if nothing happened without them ever knowing. Cookies hold personal data which could be used to create
  a profile on you to people who you don't know.


Do it again: describe a second attack that is more virulent than Moriarty's, but that's substantially different from your first idea.
  Creating a script that on loading in would navigate you to an entirely different page that looks exactly like what you expected but anything you provide goes to the malicious person. In terms of the discussion form, your responses does not get to the official fourm, and you don't get points for the post. In terms of other sites, you click on a compromised bank webpage to log in, and you get sent to the log in page of the malicious person which looks identical to the banks log-in page, but because you were in a hurry you did not notice the
actual site change in name, and typed in your account username/password, only to press log in and see that nothing happened, or even a thank you note from the evil person who was just given your creditials. 

What techniques can the server or the browser use to prevent what Moriarty is doing?
  Simple things such as reviewing the contents of a post before sending out, and replacing < with &lt as the bottom part has done on the FDF. Or we can convert all of the content into a string and posting it in the forum as such, so that < are read within the context of a string instead of as part of the source code.
